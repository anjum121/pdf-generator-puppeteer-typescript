{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAIa,QAAA,eAAe,GAAG,CAAC,UAAqB,EAAE,MAAc,EAAE,EAAE;IACvE,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE;QAC1B,CAAC,CAAC,MAAM,CAAC,CAAC;KACX;AACH,CAAC,CAAC;AAgBW,QAAA,WAAW,GAAG,CAAC,MAAe,EAAE,MAAc,EAAE,EAAE;IAC7D,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QACvC,MAAc,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KACxC;AACH,CAAC,CAAC","sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\n\ntype Wrapper = (router: Router) => void;\n\nexport const applyMiddleware = (middleware: Wrapper[], router: Router) => {\n  for (const m of middleware) {\n    m(router);\n  }\n};\n\n//\n\ntype Handler = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => Promise<void> | void;\n\ntype Route = {\n  path: string;\n  method: string;\n  handler: Handler | Handler[];\n};\n\nexport const applyRoutes = (routes: Route[], router: Router) => {\n  for (const route of routes) {\n    const { method, path, handler } = route;\n    (router as any)[method](path, handler);\n  }\n};\n"]}