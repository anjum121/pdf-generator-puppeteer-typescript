{"version":3,"file":"pdf.service.js","sourceRoot":"","sources":["pdf.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,uDAAyC;AACzC,0DAAkC;AAClC,4DAA+B;AAE/B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE7B,MAAa,UAAU;IACnB,MAAM,CAAO,SAAS,CAAC,QAAQ;;YAC3B,MAAM,QAAQ,GAAG,MAAM,oBAAK,CAAC,QAAQ,CAAC,CAAC;YACvC,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC;KAAA;IAED,MAAM,CAAO,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,eAAe,EAAE,YAAY,EAAE,cAAc;;YAC5E,IAAI,QAAQ,CAAC;YAEb,MAAM,OAAO,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC;gBACnC,IAAI,EAAE,CAAC,cAAc,CAAC;gBACtB,eAAe,EAAE,IAAI;gBACrB,QAAQ,EAAE,IAAI;aACjB,CAAC,CAAC;YACH,IAAI,OAAO,GAAG;gBACV,KAAK,EAAE,QAAQ;gBACf,cAAc,EAAE,aAAa;gBAC7B,cAAc,EAAE,oBAAoB;gBACpC,mBAAmB,EAAE,KAAK;gBAC1B,MAAM,EAAE;oBACJ,GAAG,EAAE,MAAM;oBACX,MAAM,EAAE,MAAM;iBACjB;gBACD,eAAe,EAAE,IAAI;gBACrB,IAAI,EAAE,IAAI;aACb,CAAC;YAEF,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;YAErC,IAAI,eAAe,KAAK,IAAI,EAAE;gBAC1B,OAAO,CAAC,IAAI,GAAG,cAAc,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;gBAChE,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oBAC7B,SAAS,EAAE,cAAc;iBAC5B,CAAC,CAAC;aAEN;iBAAM;gBAEH,IAAI,cAAc,KAAK,IAAI,EAAE;oBACzB,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;iBACjD;qBAAM;oBACH,IAAI,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,oBAAoB,YAAY,gBAAgB,CAAC,EAAE,MAAM,CAAC,CAAC;oBACvH,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;iBAC/C;gBAED,IAAI,IAAI,GAAG,QAAQ,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;gBAClC,OAAO,CAAC,IAAI,GAAG,cAAc,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;gBAEhE,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAG,yCAAyC;qBACzE,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAK,eAAe;qBACxC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAK,eAAe;qBACxC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAK,eAAe;qBACxC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAK,eAAe;qBACxC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAI,iCAAiC;gBAC/D,IAAI,OAAO,GAAG,+BAA+B,GAAG,IAAI,CAAC;gBACrD,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACrB,SAAS,EAAE,cAAc;iBAC5B,CAAC,CAAC;aACN;YAGD,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACxB,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YACtB,OAAO,OAAO,CAAC,IAAI,CAAC;QACxB,CAAC;KAAA;CAEJ;AAjED,gCAiEC","sourcesContent":["import * as handlebars from \"handlebars\";\nimport puppeteer from \"puppeteer\";\nimport fetch from \"node-fetch\";\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nexport class PdfService {\n    static async FetchData(endPoint) {\n        const response = await fetch(endPoint);\n        return await response.json();\n    }\n\n    static async createPdf(data, name, templateFromURL, templatePath, templateAsHtml) {\n        let template;\n\n        const browser = await puppeteer.launch({\n            args: ['--no-sandbox'],\n            defaultViewport: null,\n            headless: true\n        });\n        let options = {\n            width: '1230px',\n            headerTemplate: \"<p>Test</p>\",\n            footerTemplate: \"<p>Footer test</p>\",\n            displayHeaderFooter: false,\n            margin: {\n                top: \"10px\",\n                bottom: \"30px\"\n            },\n            printBackground: true,\n            path: null\n        };\n\n        const page = await browser.newPage();\n\n        if (templateFromURL !== null) {\n            options.path = `public/pdf/${name}-${new Date().getTime()}.pdf`;\n            await page.goto(templateFromURL, {\n                waitUntil: 'networkidle0'\n            });\n\n        } else {\n\n            if (templateAsHtml !== null) {\n                template = handlebars.compile(templateAsHtml);\n            } else {\n                let templateHtml = fs.readFileSync(path.join(process.cwd(), `public/templates/${templatePath}/template.html`), 'utf8');\n                template = handlebars.compile(templateHtml);\n            }\n\n            let html = template({data: data});\n            options.path = `public/pdf/${name}-${new Date().getTime()}.pdf`;\n\n            html = html.replace(/\\s{2,}/g, '')   // <-- Replace all consecutive spaces, 2+\n                .replace(/%/g, '%25')     // <-- Escape %\n                .replace(/&/g, '%26')     // <-- Escape &\n                .replace(/#/g, '%23')     // <-- Escape #\n                .replace(/\"/g, '%22')     // <-- Escape \"\n                .replace(/'/g, '%27');    // <-- Escape ' (to be 100% safe)\n            let dataURI = 'data:text/html;charset=UTF-8,' + html;\n            await page.goto(dataURI, {\n                waitUntil: 'networkidle0'\n            });\n        }\n\n\n        await page.pdf(options);\n        await browser.close();\n        return options.path;\n    }\n\n}"]}