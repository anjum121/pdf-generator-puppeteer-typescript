{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,2CAA6B;AAC7B,sDAA8B;AAC9B,4BAA0B;AAC1B,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE7B,oCAAyC;AACzC,8DAAsC;AACtC,mCAAmC;AACnC,0DAA0D;AAE1D,sDAA8B;AAE9B,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,CAAC,EAAE,EAAE;IAClC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACf,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAE,EAAE;IACnC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACf,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,CAAC,GAAS,EAAE;IAER,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAEzB,MAAM,WAAW,GAAG,GAAG,EAAE;QACrB,MAAM,MAAM,GAAG,iBAAO,EAAE,CAAC;QACzB,oEAAoE;QACpE,kDAAkD;QAClD,uBAAe,CAAC,oBAAU,EAAE,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAM,CAAC,CAAC;QAE/B,iBAAO,CAAC,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,CAAC,aAAa,EAAC,iBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAElF,MAAM,EAAC,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,WAAW,EAAC,GAAG,OAAO,CAAC,GAAG,CAAC;QACtD,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,+BAA+B,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IACnC,sBAAsB;IACtB,wCAAwC;AAC5C,CAAC,CAAA,CAAC,EAAE,CAAC","sourcesContent":["import * as http from 'http';\nimport express from 'express';\nimport 'reflect-metadata';\nconst path = require('path');\n\nimport {applyMiddleware} from './utils/';\nimport middleware from './middleware';\n// import routes from './services';\n// import errorHandlers from './middleware/errorHandlers';\n\nimport routes from './routes';\n\nprocess.on('uncaughtException', (e) => {\n    console.log(e);\n    process.exit(1);\n});\n\nprocess.on('unhandledRejection', (e) => {\n    console.log(e);\n    process.exit(1);\n});\n\n(async () => {\n\n    console.log('Server ==');\n\n    const startServer = () => {\n        const router = express();\n        //http://localhost:3000/status this will show you applicaiton status\n        //router.use(require('express-status-monitor')());\n        applyMiddleware(middleware, router);\n        router.use('/api/v1/', routes);\n\n        express.static(__dirname + './public');\n        router.use('/public/pdf',express.static(path.join(__dirname, './../public/pdf')));\n\n        const {PORT = 3000, Host = 'localhost'} = process.env;\n        const server = http.createServer(router);\n        server.listen(PORT, () => {\n            console.log(`Server is running at http://${Host}:${PORT}`);\n        });\n    };\n\n    await Promise.all([startServer()]);\n    // await conn.close();\n    // console.log('PG connection closed.');\n})();\n"]}